cmake_minimum_required(VERSION 3.12)
project(mruby-lite)

# configure
option(MRB_USE_METHOD_T_STRUCT "add this on machines that use higher bits of function pointers" OFF)
option(MRB_NAN_BOXING "represent mrb_value in boxed double" OFF)
option(MRB_WORD_BOXING "represent mrb_value as a word (natural unit of data for the processor)" OFF)
option(MRB_NO_BOXING "represent mrb_value as a struct; occupies 2 words" OFF)
option(MRB_UTF8_STRING "string class to handle UTF-8 encoding" ON)
option(MRB_GC_FIXED_ARENA "fixed size GC arena" ON)
option(MRB_USE_DEBUG_HOOK "enable hooks for debugger" OFF)
set(MRUBY_CONF_CMAKE "#define MRB_NO_PRESYM\n")
if (MRB_USE_METHOD_T_STRUCT)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_USE_METHOD_T_STRUCT\n")
endif()
if (MRB_NAN_BOXING)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_NAN_BOXING\n")
endif()
if (MRB_WORD_BOXING)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_WORD_BOXING\n")
endif()
if (MRB_NO_BOXING)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_NO_BOXING\n")
endif()
if (MRB_UTF8_STRING)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_UTF8_STRING\n")
endif()
if (MRB_GC_FIXED_ARENA)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_GC_FIXED_ARENA\n")
endif()
if (MRB_USE_DEBUG_HOOK)
    set(MRUBY_CONF_CMAKE "${MRUBY_CONF_CMAKE}#define MRB_USE_DEBUG_HOOK\n")
endif()

# libmruby_core
configure_file(include/mrbconf.h.in ${CMAKE_CURRENT_BINARY_DIR}/mrbconf.h @ONLY)
file(GLOB_RECURSE MRB_CORE_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c**)
add_library(mruby_core STATIC ${MRB_CORE_SOURCES})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_BINARY_DIR})
add_compile_options(-fPIC)
if (CMAKE_CROSSCOMPILING)
    set(MRUBY_MRBC "" CACHE FILEPATH "mrbc executable")
else()
    set(MRUBY_MRBC ${CMAKE_CURRENT_BINARY_DIR}/mrbc CACHE FILEPATH "mrbc executable")
endif()

# base mrblib
file(GLOB_RECURSE MRB_MRBLIB_BASE_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/mrblib/*.rb)
add_custom_target(mrblib_base ALL
    COMMAND ${MRUBY_MRBC} -B mrblib_base -o ${CMAKE_CURRENT_BINARY_DIR}/mrblib_base.h ${MRB_MRBLIB_BASE_SOURCES}
    BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/mrblib_base.h
    # COMMENT "build mrblib base"
)
set(MRB_MRBLIB_INCLUDE "#include \"mrblib_base.h\"\n")

# build mrbgems
set(MRB_DEPENDENCIES "")
set(MRB_MGEM_LIST_STDLIB "mruby-compar-ext;mruby-enum-ext;mruby-string-ext;mruby-numeric-ext;mruby-array-ext;mruby-hash-ext;mruby-range-ext;mruby-proc-ext;mruby-symbol-ext;mruby-object-ext;mruby-objectspace;mruby-set;mruby-fiber;mruby-enumerator;mruby-enum-lazy;mruby-toplevel-ext;mruby-kernel-ext;mruby-class-ext;mruby-metaprog;mruby-method;mruby-eval;mruby-compiler;mruby-error;mruby-errno;mruby-pack;mruby-struct;mruby-sprintf" CACHE STRING "built-in mrb mgems list")
set(MRB_MGEM_LIST_CUSTOM "" CACHE STRING "custom mrb mgems list")
set(MRB_MGEM_LIST ${MRB_MGEM_LIST_STDLIB})
set(MRB_MGEM_LIST ${MRB_MGEM_LIST} ${MRB_MGEM_LIST_CUSTOM})
set(MRB_SOURCES "")
foreach(MRB_MGEM_NAME ${MRB_MGEM_LIST})
    string(REPLACE "-" "_" MRB_MGEM_SIGN ${MRB_MGEM_NAME})
    file(GLOB_RECURSE MRB_MGEM_CORE_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/mrbgems/${MRB_MGEM_NAME}/core/*.c**)
    file(GLOB_RECURSE MRB_MGEM_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/mrbgems/${MRB_MGEM_NAME}/src/*.c**)
    file(GLOB_RECURSE MRB_MGEM_RBSOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/mrbgems/${MRB_MGEM_NAME}/mrblib/*.rb)
    list(LENGTH MRB_MGEM_SOURCES MRB_MGEM_SOURCES_COUNT)
    if (MRB_MGEM_SOURCES_COUNT GREATER 0)
        set(MRB_MRBLIB_DECLARES "${MRB_MRBLIB_DECLARES}extern void mrb_${MRB_MGEM_SIGN}_gem_init(mrb_state* mrb);\n")
        set(MRB_MRBLIB_DECLARES "${MRB_MRBLIB_DECLARES}extern void mrb_${MRB_MGEM_SIGN}_gem_final(mrb_state* mrb);\n")
        set(MRB_MRBLIB_INIT_EXPR "${MRB_MRBLIB_INIT_EXPR}MRB_GEMINIT_PROCESS(mrb_${MRB_MGEM_SIGN}_gem_init, ${MRB_MGEM_SIGN});\n")
        set(MRB_MRBLIB_FINAL_EXPR "${MRB_MRBLIB_FINAL_EXPR}mrb_${MRB_MGEM_SIGN}_gem_final(mrb);\n")
    endif()
    list(LENGTH MRB_MGEM_RBSOURCES MRB_MGEM_RBSOURCES_COUNT)
    if (MRB_MGEM_RBSOURCES_COUNT GREATER 0)
        set(MRB_MRBLIB_DECLARES "${MRB_MRBLIB_DECLARES}extern void mrb_init_mrbgem_${MRB_MGEM_SIGN}_mrblib(mrb_state* mrb);\n")
        set(MRB_MRBLIB_DECLARES "${MRB_MRBLIB_DECLARES}#define MRB_${MRB_MGEM_SIGN}_init mrb_init_mrbgem_${MRB_MGEM_SIGN}_mrblib(mrb)\n")
        add_custom_target(mrbgem_${MRB_MGEM_SIGN} ALL
            COMMAND ${MRUBY_MRBC} -B mrbgem_${MRB_MGEM_SIGN} -o ${CMAKE_CURRENT_BINARY_DIR}/mrbgem_${MRB_MGEM_SIGN}.h ${MRB_MGEM_RBSOURCES}
            BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/mrbgem_${MRB_MGEM_SIGN}.h
            # COMMENT "build mrbgem_${MRB_MGEM_SIGN}"
        )
        add_dependencies(mrbgem_${MRB_MGEM_SIGN} mrblib_base)
        set(MRB_DEPENDENCIES ${MRB_DEPENDENCIES};mrbgem_${MRB_MGEM_SIGN})
        configure_file(mrbgems/mrbgem.c.in ${CMAKE_CURRENT_BINARY_DIR}/mrbgem_${MRB_MGEM_SIGN}.c @ONLY)
        set(MRB_SOURCES ${MRB_SOURCES};${CMAKE_CURRENT_BINARY_DIR}/mrbgem_${MRB_MGEM_SIGN}.c)
    else()
    set(MRB_MRBLIB_DECLARES "${MRB_MRBLIB_DECLARES}#define MRB_${MRB_MGEM_SIGN}_init\n")
    endif()
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/mrbgems/${MRB_MGEM_NAME}/include)
    set(MRB_CORE_SOURCES ${MRB_CORE_SOURCES};${MRB_MGEM_CORE_SOURCES})
    set(MRB_SOURCES ${MRB_SOURCES};${MRB_MGEM_SOURCES})
endforeach()
configure_file(mrbgems/mrbgems.c.in ${CMAKE_CURRENT_BINARY_DIR}/mrbgems.c @ONLY)
set(MRB_SOURCES ${MRB_CORE_SOURCES};${MRB_SOURCES};${CMAKE_CURRENT_BINARY_DIR}/mrbgems.c)

# build mruby
configure_file(mrblib/mrblib.c.in ${CMAKE_CURRENT_BINARY_DIR}/mrblib.c @ONLY)
add_library(mruby STATIC ${MRB_SOURCES} ${CMAKE_CURRENT_BINARY_DIR}/mrblib.c)
foreach(MRB_DEPENDENCY ${MRB_DEPENDENCIES})
    add_dependencies(mruby ${MRB_DEPENDENCY})
endforeach()

# mrbc
if (NOT CMAKE_CROSSCOMPILING)
    file(GLOB_RECURSE MRB_COMPILER_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/mrbgems/mruby-compiler/core/*.c**)
    file(GLOB_RECURSE MRB_MRBC_SOURCES CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/mrbgems/mruby-bin-mrbc/tools/*.c**)
    add_executable(mrbc ${MRB_COMPILER_SOURCES} ${MRB_MRBC_SOURCES})
    target_link_libraries(mrbc mruby_core)
    add_dependencies(mrbc mruby_core)
    add_dependencies(mrblib_base mrbc)
    add_dependencies(mruby mrbc)
endif()